(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{239:function(e,t,n){"use strict";n.r(t);var a=n(0),o=Object(a.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"deploying-smart-contracts"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#deploying-smart-contracts"}},[e._v("#")]),e._v(" Deploying Smart Contracts")]),e._v(" "),n("p",[e._v("The deploy command in the "),n("a",{attrs:{href:"https://agoric.com/documentation/getting-started/agoric-cli-guide.html#agoric-deploy",target:"_blank",rel:"noopener noreferrer"}},[e._v("agoric command line tool"),n("OutboundLink")],1),e._v("\nsupports deploying contracts and off-chain web applications that talk to them. The command\nhas two primary uses:")]),e._v(" "),n("ul",[n("li",[e._v("Deploy smart contract source code onto the blockchain")]),e._v(" "),n("li",[e._v("Deploy and setup an application program to the local server")])]),e._v(" "),n("h2",{attrs:{id:"contract-deployment"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#contract-deployment"}},[e._v("#")]),e._v(" Contract deployment")]),e._v(" "),n("p",[e._v("The primary function of "),n("code",[e._v("contract/deploy.js")]),e._v(' is to bundle up a contract\'s source code\n(which may consist of multiple files and modules) and "install"\nit on the blockchain as source code, using '),n("code",[e._v("zoe")]),e._v(". This does "),n("em",[e._v("not")]),e._v(" execute\ncontract code; it just makes the code available on-chain.")]),e._v(" "),n("p",[e._v("The contract deployment process uses "),n("a",{attrs:{href:"https://agoric.com/documentation/zoe/api/zoe.html#e-zoe-install-code-moduleformat",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("zoe.install")]),n("OutboundLink")],1),e._v(" to install\nthe source code on-chain. This returns an installation handle associated with the\nsource code. In a typical contract deployment, the installation handle is stored\nin the default shared registry so that it is broadly accessible on the chain.\nIts registry key is written to a config file in the "),n("code",[e._v("ui")]),e._v(" directory.")]),e._v(" "),n("p",[e._v("See the "),n("a",{attrs:{href:"https://github.com/Agoric/dapp-encouragement/blob/master/contract/deploy.js",target:"_blank",rel:"noopener noreferrer"}},[e._v("dapp-encouragement repository"),n("OutboundLink")],1),e._v(" for an example of a typical contract deploy script.")]),e._v(" "),n("p",[e._v("Deploying the dapp-encouragement contract (e.g., with "),n("code",[e._v("agoric deploy contract/deploy.js")]),e._v(") installs "),n("code",[e._v("dapp-encouragement")]),e._v(" contract on chain, and generates the\nfile "),n("code",[e._v("./ui/public/conf/installationConstants.js")]),e._v("\nwith contents like:")]),e._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// GENERATED FROM dapp-encouragement/contract/deploy.js")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("export")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("default")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"CONTRACT_NAME"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"encouragement"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"INSTALLATION_REG_KEY"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"encouragementinstallation_9794"')]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])])]),n("p",[e._v("The Registry determines the particular registry key, in this case\n"),n("code",[e._v('"encouragementinstallation_9794"')]),e._v(", so it is different for each contract deployment.")]),e._v(" "),n("h2",{attrs:{id:"application-service-deployment-and-setup"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#application-service-deployment-and-setup"}},[e._v("#")]),e._v(" Application service deployment and setup")]),e._v(" "),n("p",[e._v("You will need to customize the API server deployment and setup much more\nfor your particular application and\ncontract. Some dapps use a singleton contract instance that must be created,\nfind and connect to on-chain resources like issuers for specific currencies,\ncreate new on-chain resources like new currencies or NFTs, create new Purses\nfor the application's use, or seed the on-chain contract with initial orders\nor configuration.")]),e._v(" "),n("p",[e._v("The api/deploy.js scripts from teh example contracts can show some of the\nrange of these custom setup actions:")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://github.com/Agoric/dapp-encouragement/blob/master/api/deploy.js",target:"_blank",rel:"noopener noreferrer"}},[e._v("dapp-encouragement"),n("OutboundLink")],1)]),e._v(" "),n("li",[n("a",{attrs:{href:"https://github.com/Agoric/dapp-simple-exchange/blob/master/api/deploy.js",target:"_blank",rel:"noopener noreferrer"}},[e._v("dapp-simple-exchange"),n("OutboundLink")],1)]),e._v(" "),n("li",[n("a",{attrs:{href:"https://github.com/Agoric/dapp-autoswap/blob/master/api/deploy.js",target:"_blank",rel:"noopener noreferrer"}},[e._v("dapp-autoswap"),n("OutboundLink")],1)])]),e._v(" "),n("p",[e._v("See the "),n("a",{attrs:{href:"https://github.com/Agoric/dapp-encouragement/compare/master..dibc-encouragement",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("dibc-encouragement")]),e._v(" branch"),n("OutboundLink")],1),e._v(" for an example of the additions needed to support IBC.")]),e._v(" "),n("p",[e._v("Steps in the application deployment may include:")]),e._v(" "),n("ul",[n("li",[e._v("Bundle the "),n("code",[e._v("api")]),e._v(' code and deploy it to the running "api" process (e.g., the\nlocal '),n("code",[e._v("ag-solo")]),e._v(" process)")]),e._v(" "),n("li",[e._v("Include the contract installation configuration information in the bundle")]),e._v(" "),n("li",[e._v("Create new currencies and add them to the application's wallet")])]),e._v(" "),n("p",[e._v("Steps for contracts that use a singleton instance for all clients may further include:")]),e._v(" "),n("ul",[n("li",[e._v("Instantiate a contract instance using the installation created when the contract deployed")]),e._v(" "),n("li",[e._v("Use the invitation from that instance creation to configure the new instance")]),e._v(" "),n("li",[e._v("Register the contract instance's "),n("code",[e._v("instanceHandle")]),e._v(" with the Registry")]),e._v(" "),n("li",[e._v("Record the contract instance's Registry key in a configuration file")])]),e._v(" "),n("h2",{attrs:{id:"how-it-works"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#how-it-works"}},[e._v("#")]),e._v(" How it works")]),e._v(" "),n("p",[e._v("All deployment happens via the local running Agoric process (specifically, the "),n("code",[e._v("ag-solo")]),e._v("\nprocess) that communicates with either a locally running\nor remote chain. The local process has a "),n("code",[e._v("home")]),e._v(" object, which contains\nreferences to services on-chain, include "),n("code",[e._v("zoe")]),e._v(", the default "),n("code",[e._v("registry")]),e._v(", and the\napplication user's "),n("code",[e._v("wallet")]),e._v(". Deploying to the chain uploads\nthe bundled contract source code to the local process, and then uses its "),n("code",[e._v("zoe")]),e._v("\naccess (via that "),n("code",[e._v("home")]),e._v(" object) to install the code on chain.")]),e._v(" "),n("p",[e._v("Developers can use all the on-chain commands that deployment scripts use to deploy\ncontracts and dapps via the REPL associated with the wallet.")]),e._v(" "),n("p",[e._v("The deploy.js scripts run in an ephemeral Node.js outside of the swingset kernel.\nThe spawner runs within ag-solo, so is persistent. Once the deploy.js script ends,\nconnections to any of its objects are severed.")])])}),[],!1,null,null,null);t.default=o.exports}}]);